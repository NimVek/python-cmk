---
name: Continuous Integration

on  :
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  lint:
    strategy:
      matrix:
        os: [ubuntu-latest]
        python: ['3.8']
        include:
          - os: ubuntu-latest
            CACHE_PIP: ~/.cache/pip
            CACHE_PRE_COMMIT: ~/.cache/pre-commit

    name: Lint
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Caching
        uses: actions/cache@v4
        with:
          path: |
            ${{ matrix.CACHE_PIP }}
            ${{ matrix.CACHE_PRE_COMMIT }}
          key: lint-${{ runner.os }}-${{ matrix.python }}-${{ hashFiles('**/.pre-commit-config.yaml')
            }}
          restore-keys: |
            lint-${{ runner.os }}-${{ matrix.python }}-

      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Install pre-commit
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit

      - name: Lint
        run: |
          pre-commit run --all-files

  test-simple:
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        python: ['3.8', '3.10', '3.12']
        include:
          - os: windows-latest
            CACHE_PIP: ~\AppData\Local\pip\Cache
            CACHE_POETRY: ~\AppData\Local\poetry\Cache
          - os: macos-latest
            CACHE_PIP: ~/Library/Caches/pip
            CACHE_POETRY: ~/Library/Caches/poetry

    name: Test (simple)
    runs-on: ${{ matrix.os }}
    needs: lint
    env:
      OS: ${{ matrix.os }}
      PYTHON: ${{ matrix.python }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Caching
        uses: actions/cache@v4
        with:
          path: |
            ${{ matrix.CACHE_PIP }}
            ${{ matrix.CACHE_POETRY }}
          key: test-${{ runner.os }}-${{ matrix.python }}-${{ hashFiles('**/pyproject.toml')
            }}
          restore-keys: |
            test-${{ runner.os }}-${{ matrix.python }}-

      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install

      - name: Collect Environment
        run: |
          python dev/github_env.py

      - name: Test
        run: |
          poetry run pytest -m "not docker" --verbose --numprocesses=auto --cov=src --cov-report=xml

      - name: Coverage
        uses: codecov/codecov-action@v4
        with:
          env_vars: OS, PYTHON

  test-full:
    strategy:
      matrix:
        os: [ubuntu-latest]
        python: ['3.8', '3.10', '3.11', '3.12']
        cmk: [2.2.0, 2.3.0]
        include:
          - os: ubuntu-latest
            CACHE_PIP: ~/.cache/pip
            CACHE_POETRY: ~/.cache/poetry

    name: Test (full)
    runs-on: ${{ matrix.os }}
    needs: lint
    env:
      OS: ${{ matrix.os }}
      PYTHON: ${{ matrix.python }}

    services:
      cmk:
        image: checkmk/check-mk-raw:${{ matrix.cmk }}-latest
        env:
          CMK_PASSWORD: cmkadmin
        ports:
          - 8080:5000

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Caching
        uses: actions/cache@v4
        with:
          path: |
            ${{ matrix.CACHE_PIP }}
            ${{ matrix.CACHE_POETRY }}
          key: test-${{ runner.os }}-${{ matrix.python }}-${{ hashFiles('**/pyproject.toml')
            }}
          restore-keys: |
            test-${{ runner.os }}-${{ matrix.python }}-

      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install

      - name: Collect Environment
        run: |
          python dev/github_env.py

      - name: Test
        run: |
          poetry run pytest --verbose --numprocesses=auto --cov=src --cov-report=xml

      - name: Coverage
        uses: codecov/codecov-action@v4
        with:
          env_vars: OS, PYTHON

  docs:
    strategy:
      matrix:
        os: [ubuntu-latest]
        python: ['3.8']
        include:
          - os: ubuntu-latest
            CACHE_PIP: ~/.cache/pip
            CACHE_POETRY: ~/.cache/poetry

    name: Documentation
    runs-on: ${{ matrix.os }}
    needs: [test-simple, test-full]

    permissions:
      contents: read
      pages: write
      id-token: write

    concurrency:
      group: documentation
      cancel-in-progress: false

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Caching
        uses: actions/cache@v4
        with:
          path: |
            ${{ matrix.CACHE_PIP }}
            ${{ matrix.CACHE_POETRY }}
          key: docs-${{ runner.os }}-${{ matrix.python }}-${{ hashFiles('**/pyproject.toml')
            }}
          restore-keys: |
            docs-${{ runner.os }}-${{ matrix.python }}-

      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install

      - name: Generate Documentation
        run: |
          poetry run mkdocs build

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
